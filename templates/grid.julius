var rows = #{show rows};
var cols = #{show cols};

var focused_row;
var focused_col;
var across = 1;

var initialGrid = "#{gridVToText gr}";
var grid = [];
var lastSavedGrid = [];
var numbers = [];

var solving;
var diagonal = 1;

var puzzleId = #{show i};

var acrossClues = [];
var downClues = [];

var updated = false;

var clientId = "#{show clientId}";

var shouldMarkTwos = true;
var shouldMarkOnes = true;

$(document).ready(function() {
  buildGrid();
  numberGrid();
  setInterval(periodicSave, 3000);
  updateDisplay();
  onChangeStructure();
  $(".crossword-grid-square").click(function(e) {
    if (e.ctrlKey) {
      var r = $(this).attr("data-row");
      var c = $(this).attr("data-col");
      toggleBlack(r,c);
      markChanged(rows-r-1,cols-c-1);
      markChanged(r,c);
      onChangeStructure();
      if (lookupGrid(focused_row,focused_col) == ".") {
        advance(true,false);
      }
      if (lookupGrid(focused_row,focused_col) == ".") {
        focused_row = focused_col = undefined;
      }
      updated = true;
      //markShort();
    } else if (!$(this).hasClass("black")) {
      focused_row = parseInt($(this).attr("data-row"));
      focused_col = parseInt($(this).attr("data-col"));
    }
    updateDisplay();
  });
  $(".crossword-grid-square").dblclick(function() {
    across = !across;
    highlight();
    //saveGrid();
  });
  $(document).keydown(function(e) {
    if (!e.ctrlKey && !e.metaKey) {
      if (65 <= e.which && e.which <= 90) {
        grid[focused_row][focused_col] = String.fromCharCode(e.which).toUpperCase();
        markChangedFocused();
        advance(false);
        updated = true;
      } else if (e.which == 8 /* backspace */) {
        //$(".focused").children(".crossword-grid-letter").html("");
        if (grid[focused_row][focused_col] !== " ") {
          console.log("x"+grid[focused_row][focused_col]);
          grid[focused_row][focused_col] = " ";
          markChangedFocused();
        }
        retreat(false);
        //if (across) focused_col--; else focused_row--;
      } else if (e.which == 9 /* tab */) {
        e.preventDefault();
        while (!advance(true,true)) {/*empty*/;}
      } else if (e.which == 190 /*period*/) {
        //var sq = lookup(focused_row,focused_col);
        //sq.children(".crossword-grid-letter").html("");
        toggleBlack(focused_row,focused_col);
        onChangeStructure();
        //sq.addClass("black");
        markChangedFocused();
        markChanged(rows-focused_row-1,cols-focused_col-1);
        advance(true,true);
        updated = true;
      } else if (e.which == 39) {
        if (!across) across = 1; else advance(true,false);
      } else if (e.which == 37) {
        if (!across) across = 1; else retreat(true);
      } else if (e.which == 38) {
        if (across) across = 0; else retreat(true);
      } else if (e.which == 40) {
        if (across) across = 0; else advance(true,false);
      } else {
        console.log(e.which);
      }
      updateDisplay();
      /*
      if (updated) {
        var domsq = $("td.crossword-grid-square[data-row='"+focused_row+"'][data-col='"+focused_col+"']");
        domsq.addClass("changed");
        var domsqabove = $("td.crossword-grid-square[data-row='"+(focused_row-1)+"'][data-col='"+focused_col+"']");
        domsqabove.addClass("below-changed");
        var domsqbelow = $("td.crossword-grid-square[data-row='"+(focused_row+1)+"'][data-col='"+focused_col+"']");
        domsqbelow.addClass("above-changed");
        var domsqleft = $("td.crossword-grid-square[data-row='"+focused_row+"'][data-col='"+(focused_col-1)+"']");
        domsqleft.addClass("right-changed");
        var domsqright = $("td.crossword-grid-square[data-row='"+focused_row+"'][data-col='"+(focused_col+1)+"']");
        domsqright.addClass("left-changed");
        //saveGrid();
      }
  */
    }
  });
  /*
  $("#new-button").click(function (e) {
    e.preventDefault();
    $.post ( "@{NewR}"
           , {}
           , function (data) {
               puzzleId = data.id;
             }
           , 'json'
    );
  });
  */
});

function markChangedFocused () {
  markChanged(focused_row,focused_col);
}

function markChanged (r,c) {
  updated = true;
  lookup(r,c).addClass("changed");
  lookup(r-1,c).addClass("below-changed");
  lookup(r-(-1),c).addClass("above-changed"); // force interpretation as number rather than string
  lookup(r,c-1).addClass("right-changed");
  lookup(r,c-(-1)).addClass("left-changed");
}

function buildGrid () {
  for (var i = 0 ; i < rows ; i++) {
    grid[i] = [];
    numbers[i] = [];
    lastSavedGrid[i] = [];
    for (var j = 0 ; j < cols ; j++) {
      grid[i][j] = initialGrid[i*rows+j];
      numbers[i][j] = 0;
      lastSavedGrid[i][j] = initialGrid[i*rows+j];
    }
  }
}

function updateDisplay () {
  numberGrid();
  displayGrid ();
  highlight ();
}

function displayGrid () {
  for (var i = 0 ; i < rows ; i++) {
    for (var j = 0 ; j < cols ; j++) {
      var c = lookupGrid(i,j);
      var sq = lookup(i,j);
      if (c == ".") {
        sq.children(".crossword-grid-letter").html("");
        sq.addClass("black");
      } else {
        sq.children(".crossword-grid-letter").html(c);
        sq.removeClass("black");
      }
      var n = numbers[i][j];
      if (n) {
        sq.children(".crossword-grid-number").html(n);
      } else {
        sq.children(".crossword-grid-number").html("");
      }
    }
  }
}

function numberGrid () {
  var open = function (i,j) {
    var sq = lookupGrid(i,j);
    return (typeof sq != "undefined") && sq != ".";
  }
  var n = 1;
  for (var i = 0 ; i < rows ; i++) {
    for (var j = 0 ; j < cols ; j++) {
      if (open(i,j)&&((!open(i,j-1)&&open(i,j+1))||(!open(i-1,j)&&open(i+1,j)))) {
        numbers[i][j] = n;
        n++;
      } else {
        numbers[i][j] = 0;
      }
    }
  }
}

function toggleBlack(row,col) {
  if (lookupGrid(row,col) == ".") {
    grid[row][col] = " ";
  } else {
    grid[row][col] = ".";
  }
  if (diagonal) {
    var opprow = rows-row-1;
    var oppcol = cols-col-1;
    if (opprow != row || oppcol != col) {
      grid[opprow][oppcol] = lookupGrid(row,col); //lookup(opprow,oppcol).toggleClass("black");
    }
  }
}

function advance (hard,wrap) {
  if (allblack()) return 1;
  var next;
  var ret = 0;
  if (across) next = focused_col+1; else next = focused_row+1;
  var sq = across ? lookupGrid(focused_row,next) : lookupGrid(next,focused_col);
  if (sq == ".") {
    ret=1;
    if (hard) {
      for (var i = next ; i < (across ? cols : rows) ; i++) {
        sq = across ? lookupGrid(focused_row,i) : lookupGrid(i,focused_col);
        if (sq != ".") {
          if (across) focused_col = i; else focused_row = i;
          return ret;
        }
      }
      if (wrap) next = i;
    } else return ret;
  }
  if (next >= (across ? cols : rows)) {
    ret=1;
    if (wrap) {
      if (across) focused_row = (focused_row+1)%rows; else focused_col = (focused_col+1)%cols;
      if (focused_row >= rows) {
        focused_row = 0;
      } else if (focused_col >= cols) {
        focused_col = 0;
      }
      if (across) focused_col = -1; else focused_row = -1;
      return advance(hard,wrap)||ret;
    } else return ret;
  }
  if (across) focused_col = next; else focused_row = next;
}

function allblack() {
  for (var i = 0 ; i < rows ; i++) {
    for (var j = 0 ; j < cols ; j++) {
      if (lookupGrid(i,j) != ".") return false;
    }
  }
  return true;
}

function retreat (hard) {
  var next;
  if (across) next = focused_col-1; else next = focused_row-1;
  if (next < 0) return;
  if ((across ? lookupGrid(focused_row,next) : lookupGrid(next,focused_col)) == ".") {
    if (hard) {
      for (var i = next ; i >= 0 ; i--) {
        if ((across ? lookupGrid(focused_row,i) : lookupGrid(i,focused_col)) != ".") {
          if (across) focused_col = i; else focused_row = i;
          return;
        }
      }
    } else return;
  } else {
    if (across) focused_col = next; else focused_row = next;
  }
} 

function highlight() {
  if (typeof focused_row == "undefined" || typeof focused_col == "undefined") return;
  lookup(focused_row,focused_col).addClass("focused").removeClass("focused-secondary");
  var cursquare;
  var r = focused_row;
  var c = focused_col;
  while (lookupGrid(r,c) != "." && r >= 0 && c >= 0) {
    if (across) c--; else r--;
  }
  //if (across) c--; else r--;
  var firstvisited = across ? c : r;
  var cursquare;
  do {
    if (across) c++; else r++;
    cursquare = lookup(r,c);
    if (r != focused_row || c != focused_col) cursquare.addClass("focused-secondary").removeClass("focused");
  } while (lookupGrid(r,c) != "." && r >= 0 && c >= 0 && r < rows && c < cols);
  if (across) c--; else r--;
  var lastvisited = across ? c : r;
  var rmfocus = function (ix,item) {
    $(item).removeClass("focused").removeClass("focused-secondary");
  }
  var arowstr = across ? "row" : "col";
  var acolstr = across ? "col" : "row";
  var arow = across ? focused_row : focused_col;
  var acol = across ? focused_col : focused_row;
  $("td.crossword-grid-square").not("[data-" + arowstr + "='" + arow + "']").each(rmfocus);
  var rmcolfocus = function (i) {
    $("td.crossword-grid-square[data-"+acolstr+"='"+i+"']").each(rmfocus); //.not("[data-"+acolstr+"='"+acol+"']").each(rmfocus);
  }
  for (var i = 0 ; i < firstvisited ; i++) {
    rmcolfocus(i);
  }
  for (i = lastvisited+1 ; i < (across ? cols : rows) ; i++) {
    rmcolfocus(i);
  }
}

function lookupGrid(row,col) {
  if (typeof row == "undefined" || typeof col == "undefined" || row < 0 || row >= rows || col < 0 || col >= cols) {
    return undefined;
  } else {
    return grid[row][col];
  }
}

function lookup(row,col) {
  return $("td[data-row='"+row+"'][data-col='"+col+"']");
}

function acrossClue(row,col) {
  for (var i = row ; i >= 0 ; i--) {
    var n = numbers[i][col];
    if (n) return n;
  }
  return 0;
}

function downClue(row,col) {
  for (var j = col ; j >= 0 ; j--) {
    var n = numbers[row][j];
    if (n) return n;
  }
  return 0;
}

function flattenGrid(gr) {
  var g = ""
  for (var i = 0 ; i < rows ; i++) {
    for (var j = 0 ; j < cols ; j++) {
      var sq = gr[i][j];
      if (sq == " ") {
        g += " ";
      } else  {
        g += sq;
      }
    }
  }
  return g;
}

function unflattenGrid(str) {
  var gr = [];
  for (var i = 0 ; i < rows ; i++) {
    gr[i] = [];
    for (var j = 0 ; j < cols ; j++) {
      var sq = str[i*cols+j];
      gr[i][j] = sq;
    }
  }
  return gr;
}

function saveGrid () {
  $.post  ( "@{SaveR}"
          , { 'puzzleId' : puzzleId, 'grid' : flattenGrid(grid), 'lastSavedGrid' : flattenGrid(lastSavedGrid), 'clientId' : clientId }
          , function (data) {
              if (data.ok) {
                lastSavedGrid = unflattenGrid(data.realLsgr);
              } else if (data.realLsgr) {
                console.log("ERROR");
                grid = unflattenGrid(data.realLsgr);
                lastSavedGrid = unflattenGrid(data.realLsgr);
               } else {
                 console.log("failed...");
               }
               $("td.crossword-grid-square.changed").removeClass("changed");
               $("td.crossword-grid-square.below-changed").removeClass("below-changed");
               $("td.crossword-grid-square.above-changed").removeClass("above-changed");
               $("td.crossword-grid-square.left-changed").removeClass("left-changed");
               $("td.crossword-grid-square.right-changed").removeClass("right-changed");
          }
          , 'json'
  );
}

function periodicSave () {
  if (updated) {
    saveGrid();
  }
  updated = false;
}

function onChangeStructure() {
  markShort();
  wordCount();
}
function markShort () {
  $(".two").removeClass("two");
  if (shouldMarkTwos || shouldMarkOnes) {
    for (var i = 0 ; i < rows ; i++) {
      var run_length = 0;
      var run_start = 0;
      for (var j = 0 ; j <= cols ; j++) {
        if (j == cols || grid[i][j] == '.') {
          if ((shouldMarkTwos && run_length == 2) || (shouldMarkOnes && run_length == 1)) {
            for (var jj = run_start ; jj < run_start + run_length ; jj++) {
              lookup(i,jj).addClass("two");
            }
          }
          run_length = 0;
          run_start = j+1;
        } else {
          run_length++;
        }
      }
    }
    for (var j = 0 ; j < cols ; j++) {
      var run_length = 0;
      var run_start = 0;
      for (var i = 0 ; i <= rows ; i++) {
        if (i == rows || grid[i][j] == '.') {
          if ((shouldMarkTwos && run_length == 2) || (shouldMarkOnes && run_length == 1)) {
            for (var ii = run_start ; ii < run_start + run_length ; ii++) {
              lookup(ii,j).addClass("two");
            }
          }
          run_length = 0;
          run_start = i+1;
        } else {
          run_length++;
        }
      }
    }
  }
}

function wordCount () {
  var acrosswords = 0;
  var downwords = 0;
  var onBlack = true;
  for (var i = 0 ; i < rows ; i++) {
    for (var j = 0 ; j <= cols ; j++) {
      if (j == cols || grid[i][j] == '.') {
        if (!onBlack) {
          onBlack = true;
          acrosswords++;
        }
      } else {
        onBlack = false;
      }
    }
  }
  for (var j = 0 ; j < cols ; j++) {
    for (var i = 0 ; i <= rows ; i++) {
      if (i == rows || grid[i][j] == '.') {
        if (!onBlack) {
          onBlack = true;
          downwords++;
        }
      } else {
        onBlack = false;
      }
    }
  }
  console.log("across words: "+ acrosswords);
  console.log("down words: "+ downwords);
}

// vim: set filetype=javascript :
